name: Build & commit AI Watch data

on:
  schedule:
    - cron: "0 * * * *"   # varje hel timme (UTC)
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm i rss-parser googleapis

      # 1) Demo-logg om USE_DEMO_LOGS=true
      # 2) Annars hämta via SSH+SCP, filtrerat till LOG_DOMAIN (t.ex. worldpoker.fallberg.com)
      - name: Prepare access logs (demo or SFTP/SCP)
        env:
          USE_DEMO_LOGS:   ${{ secrets.USE_DEMO_LOGS }}   # "true" för demo
          SSH_HOST:        ${{ secrets.SSH_HOST }}
          SSH_USER:        ${{ secrets.SSH_USER }}
          SSH_PORT:        ${{ secrets.SSH_PORT }}        # valfri, default 22
          SSH_PASSWORD:    ${{ secrets.SSH_PASSWORD }}    # valfri fallback för scp/sftp (om host tillåter)
          LOG_DOMAIN:      ${{ secrets.LOG_DOMAIN }}      # ex: worldpoker.fallberg.com
        run: |
          set -e
          mkdir -p logs

          # --- Demo ---
          if [ "${USE_DEMO_LOGS,,}" = "true" ]; then
            echo "Using demo access.log"
            printf '%s\n' \
              '127.0.0.1 - - [21/Aug/2025:10:13:11 +0000] "GET / HTTP/1.1" 200 123 "-" "GPTBot (https://openai.com/gptbot)"' \
              '127.0.0.1 - - [21/Aug/2025:10:14:55 +0000] "GET /poker HTTP/1.1" 200 456 "-" "PerplexityBot/1.0 (+https://www.perplexity.ai/bot)"' \
              '127.0.0.1 - - [21/Aug/2025:10:15:22 +0000] "GET /robots.txt HTTP/1.1" 200 78 "-" "Mozilla/5.0 (Linux; Google-Extended)"' \
              > logs/access.log
            echo "LOG_PATH=$PWD/logs/access.log" >> $GITHUB_ENV
            exit 0
          fi

          # --- SSH/SCP för riktiga loggar ---
          if [ -n "$SSH_HOST" ] && [ -n "$SSH_USER" ] && [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ] && [ -n "$LOG_DOMAIN" ]; then
            PORT="${SSH_PORT:-22}"
            printf '%s' '${{ secrets.SSH_PRIVATE_KEY }}' > key
            chmod 600 key

            REMOTE_DIR="/home/$SSH_USER/logs"
            echo "Listing remote logs in $REMOTE_DIR for domain: $LOG_DOMAIN"

            # Lista enbart filer för LOG_DOMAIN: månadsarkiv (.gz) + ev. livefil (-ssl_log utan suffix)
            set +e
            REMOTE_LIST=$(ssh -i key -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" \
              "ls -1 $REMOTE_DIR/${LOG_DOMAIN}-*.gz $REMOTE_DIR/${LOG_DOMAIN}-ssl_log* 2>/dev/null")
            SSH_STATUS=$?
            set -e
            echo "ssh list exit code: $SSH_STATUS"
            echo "Remote matches:"
            echo "$REMOTE_LIST"

            # Om vi inte hittar något, avbryt tyst (UI visar tomt för bots)
            if [ -z "$REMOTE_LIST" ]; then
              echo "No matching remote log files for $LOG_DOMAIN"
            else
              # Hämta varje träff med scp
              while IFS= read -r REMOTE_FILE; do
                [ -n "$REMOTE_FILE" ] || continue
                echo "Downloading $REMOTE_FILE"
                # password-fallback om satt
                if [ -n "$SSH_PASSWORD" ]; then
                  sudo apt-get update -y >/dev/null 2>&1
                  sudo apt-get install -y sshpass >/dev/null 2>&1
                  sshpass -p "$SSH_PASSWORD" scp -P "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST:$REMOTE_FILE" logs/ || true
                else
                  scp -i key -P "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST:$REMOTE_FILE" logs/ || true
                fi
              done <<< "$REMOTE_LIST"
            fi

            # Slå ihop allt till en access.log
            : > logs/access.log
            # livefiler (utan .gz), om någon
            for f in logs/${LOG_DOMAIN}-ssl_log*; do
              if [ -f "$f" ] && [[ "$f" != *.gz ]]; then
                cat "$f" >> logs/access.log
              fi
            done
            # arkiv (.gz)
            for f in logs/${LOG_DOMAIN}-*.gz; do
              [ -f "$f" ] && gunzip -c "$f" >> logs/access.log
            done

            if [ -s logs/access.log ]; then
              echo "LOG_PATH=$PWD/logs/access.log" >> $GITHUB_ENV
              echo "access.log ready ($(wc -l < logs/access.log) rows)"
            else
              echo "No log data found via SFTP/SCP — bots section will be empty."
            fi
          else
            echo "Missing SSH_* or LOG_DOMAIN secrets — skipping logs."
          fi

      - name: Generate data.json
        env:
          BRAND_TERMS:       ${{ secrets.BRAND_TERMS }}
          ALERT_FEEDS:       ${{ secrets.ALERT_FEEDS }}
          GSC_CLIENT_ID:     ${{ secrets.GSC_CLIENT_ID }}
          GSC_CLIENT_SECRET: ${{ secrets.GSC_CLIENT_SECRET }}
          GSC_REFRESH_TOKEN: ${{ secrets.GSC_REFRESH_TOKEN }}
          GSC_PROPERTY:      ${{ secrets.GSC_PROPERTY }}
          LOG_PATH:          ${{ env.LOG_PATH }}   # sätts endast om logg hittades
          DEMO:              ${{ secrets.DEMO }}   # valfritt demo-läge i scriptet
        run: node scripts/update_data.mjs

      - name: Commit data.json
        run: |
          if ! git diff --quiet -- data.json; then
            git config user.name "ai-watch-bot"
            git config user.email "actions@users.noreply.github.com"
            git add data.json
            git commit -m "Update data.json [skip ci]"
            git push
          else
            echo "No changes to commit"
          fi
